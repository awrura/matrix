#ifndef AURORA_CLIENT_MATRIX_H
#define AURORA_CLIENT_MATRIX_H

#include <Arduino.h>
#include <Adafruit_NeoPixel.h>


class LedMatrix {
private:
    Adafruit_NeoPixel matrix;

public:
    LedMatrix();

    /**
     * @brief Инициализация матрицы
     *
     * Метод инцицализации и настройки матрицы.
     * Необходимо вызывать при начале работы
     */
    void begin();

    /**
     * @brief Установить яркость матрицы
     *
     * Устанавливает глобальную яркость
     * Максимальный уровень яркости каждого светодиода
     *
     * @note Чтобы изменения яркости применились, нужно вызвать
     * метод redraw
     */
    void setBrightness(uint8_t value);

    /**
     * @brief Установить цвет светодиоду по координатам ячейки
     *
     * Устанавливает цвет сводиоду. Цвет конфигурируется по RGB
     * При установке цвета он не отрисовывается сразу на матрице
     * а запоминается в буффере. Чтобы пиксель загорелся 
     * нужно вызвать redraw()
     *
     * @param[in] width Индекс ячейки по ширине
     * @param[in] height Индекс ячейки по высоте
     */
    void setColor(uint8_t width, uint8_t height, uint8_t red, uint8_t green, uint8_t blue);

    /**
     * @brief Установить цвет светодиоду по индексу ячейки на ленте
     *
     * Устанавливает цвет сводиоду. Цвет конфигурируется по RGB
     * При установке цвета он не отрисовывается сразу на матрице
     * а запоминается в буффере. Чтобы пиксель загорелся 
     * нужно вызвать redraw()
     *
     * @param[in] index Индекс ячейки на самой ленте
     */
    void setColor(uint16_t index, uint8_t red, uint8_t green, uint8_t blue);

    /**
     * @brief Очистить матрицу
     *
     * Погасить все светодиоды на матрице, eсли быть точнее
     */
    void clear();

    /**
     * @brief Отрисовать на матрице установленные цвета
     *
     * При вызове метода setColor цвет для данного пикселя кладется в буффер. 
     * Чтобы пиксель загорелся этим цветом, необходимо вызвать метод redraw()
     * Сделано это для оптимизации, можно установить цвет сразу для нескольких
     * ячеек, а только после этого физически обновить светодиоды на матрице
     */
    void redraw();

private:

    /**
    * @brief Вычисление индекса ячейки 
    *
    * По переданным координатам возвращает индекс данной ячеки на матрице
    * Способы размещения свтодиодов на матрице могут быть различными
    * китайцы с алика делают эти матрицы как хотят, или матрица была собрана 
    * самостоятельно. Поэтому код для вычисления индекса был сделан адаптивным. 
    * Реализация была взята с проекта MatrixOS (by AlexGyver) - макросы вынесены 
    * в constexpr, остальная логика осталась как прежде.
    *
    * Спасибо AlexGyver за предоставленные исходники <3
    *
    * @param[in] x Индекс ячейки по горизонтальной оси
    * @param[in] y Индекс ячейки по вертикальной оси
    *
    * @return Индекс (адрес) ячейки на ленте
    *
    * @note Подробное описание работы с адресной лентой см. https://alexgyver.ru/matrix_guide/
    */
    uint16_t calculateIndex(int8_t x, int8_t y);
};


#endif
